{"version":3,"sources":["webparts/talentRecordForms/components/TalentRecordEditor/controls/SliderSelector.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,6BAA4B;AAC5B,yCAAoC;AACpC,gEAAkD;AAGlD;IAA4C,kCAAyB;IADrE;QAAA,qEA6BC;QA1BC,kBAAY,GAAG,UAAC,KAAK;YACnB,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAW,CAAC,CAAC;QACxD,CAAC,CAAA;QAGD,mBAAa,GAAG;YACd,MAAM,CAAA,CACJ,oBAAC,aAAM,IAAC,QAAQ,EAAE,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAI,CAAC,YAAY,EAAE,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,KAAK,EACnF,YAAY,EAAE,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,GAAG,CAC1D,CAAA;QACH,CAAC,CAAA;;IAgBH,CAAC;IAbC,+BAAM,GAAN;QAEE,IAAI,YAAY,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,yBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACvF,IAAM,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG;YACnC,YAAY,EAAE,YAAY;YAC1B,KAAK,EAAE,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAC,CAAC;SACjE,GAAG;YACF,KAAK,EAAE,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAC,CAAC;SACjE,CAAA;QAED,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QACvG,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IA3BkB,cAAc;QADlC,qBAAQ;OACY,cAAc,CA4BlC;IAAD,qBAAC;CA5BD,AA4BC,CA5B2C,KAAK,CAAC,SAAS,GA4B1D;kBA5BoB,cAAc","file":"webparts/talentRecordForms/components/TalentRecordEditor/controls/SliderSelector.js","sourcesContent":["import * as React from 'react';\r\nimport {Slider} from \"antd\";\r\nimport {observer} from \"mobx-react\";\r\nimport {invert} from '@microsoft/sp-lodash-subset'\r\n\r\n@observer\r\nexport default class SliderSelector extends React.Component<any, any> {\r\n\r\n  handleChange = (value) => {\r\n    this.props.changed(this.props.items[value] as string);\r\n  }\r\n\r\n\r\n  BuildSelector = () => {\r\n    return(\r\n      <Slider disabled={this.props.disabled} onChange={this.handleChange} marks={this.props.items}\r\n              tipFormatter={this.props.formatter} step={null}/>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let initialValue = (this.props.value) ? invert(this.props.items)[this.props.value] : 0;\r\n    const options = (this.props.value) ? {\r\n      initialValue: initialValue,\r\n      rules: [{required: true, message: this.props.validationMessage}]\r\n    } : {\r\n      rules: [{required: true, message: this.props.validationMessage}]\r\n    }\r\n\r\n    const element = this.props.form.getFieldDecorator(this.props.controlId, options)(this.BuildSelector());\r\n    return element;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\..\\..\\src"}