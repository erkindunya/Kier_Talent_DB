{"version":3,"sources":["extensions/talentDbCommandSet/TalentDbCommandSetCommandSet.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oDAAiD;AACjD,8DAAiD;AACjD,kFAK8C;AAC9C,kDAA8C;AAe9C,IAAM,UAAU,GAAW,8BAA8B,CAAC;AAE1D;IAA0D,gDAA+D;IAAzH;;IAgCA,CAAC;IA7BQ,6CAAM,GAAb;QACE,qBAAG,CAAC,IAAI,CAAC,UAAU,EAAE,0CAA0C,CAAC,CAAC;QACjE,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAGM,wDAAiB,GAAxB,UAAyB,KAAmD;QAC1E,IAAM,iBAAiB,GAAY,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACnE,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACtB,oEAAoE;YACpE,iBAAiB,CAAC,OAAO,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAGM,gDAAS,GAAhB,UAAiB,KAAgD;QAC/D,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACrB,KAAK,WAAW;gBACd,kBAAM,CAAC,KAAK,CAAC,KAAG,IAAI,CAAC,UAAU,CAAC,aAAe,CAAC,CAAC;gBACjD,KAAK,CAAC;YACR,KAAK,WAAW;gBACd,kBAAM,CAAC,KAAK,CAAC,KAAG,IAAI,CAAC,UAAU,CAAC,aAAe,CAAC,CAAC;gBACjD,KAAK,CAAC;YACR;gBACE,OAAO,CAAC,GAAG,CAAC,wBAAsB,KAAK,CAAC,MAAQ,CAAC,CAAC;gBAClD,OAAO,CAAC,GAAG,CAAC,+BAA6B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAG,CAAC,CAAA;gBACjE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;IA5BD;QADC,qBAAQ;8DAIR;IAGD;QADC,qBAAQ;yEAOR;IAGD;QADC,qBAAQ;iEAcR;IACH,mCAAC;CAhCD,AAgCC,CAhCyD,kDAAsB,GAgC/E;kBAhCoB,4BAA4B","file":"extensions/talentDbCommandSet/TalentDbCommandSetCommandSet.js","sourcesContent":["import { override } from '@microsoft/decorators';\nimport { Log } from '@microsoft/sp-core-library';\nimport {\n  BaseListViewCommandSet,\n  Command,\n  IListViewCommandSetListViewUpdatedParameters,\n  IListViewCommandSetExecuteEventParameters\n} from '@microsoft/sp-listview-extensibility';\nimport { Dialog } from '@microsoft/sp-dialog';\n\nimport * as strings from 'TalentDbCommandSetCommandSetStrings';\n\n/**\n * If your command set uses the ClientSideComponentProperties JSON input,\n * it will be deserialized into the BaseExtension.properties object.\n * You can define an interface to describe it.\n */\nexport interface ITalentDbCommandSetCommandSetProperties {\n  // This is an example; replace with your own properties\n  sampleTextOne: string;\n  sampleTextTwo: string;\n}\n\nconst LOG_SOURCE: string = 'TalentDbCommandSetCommandSet';\n\nexport default class TalentDbCommandSetCommandSet extends BaseListViewCommandSet<ITalentDbCommandSetCommandSetProperties> {\n\n  @override\n  public onInit(): Promise<void> {\n    Log.info(LOG_SOURCE, 'Initialized TalentDbCommandSetCommandSet');\n    return Promise.resolve();\n  }\n\n  @override\n  public onListViewUpdated(event: IListViewCommandSetListViewUpdatedParameters): void {\n    const compareOneCommand: Command = this.tryGetCommand('COMMAND_1');\n    if (compareOneCommand) {\n      // This command should be hidden unless exactly one row is selected.\n      compareOneCommand.visible = event.selectedRows.length === 1;\n    }\n  }\n\n  @override\n  public onExecute(event: IListViewCommandSetExecuteEventParameters): void {\n    switch (event.itemId) {\n      case 'COMMAND_1':\n        Dialog.alert(`${this.properties.sampleTextOne}`);\n        break;\n      case 'COMMAND_2':\n        Dialog.alert(`${this.properties.sampleTextTwo}`);\n        break;\n      default:\n        console.log(`Command Clicked is ${event.itemId}`);\n        console.log(`More info about the event ${JSON.stringify(event)}`)\n        throw new Error('Unknown command');\n    }\n  }\n}\n"],"sourceRoot":"..\\..\\..\\src"}