{"version":3,"sources":["stores/LookupDataStores/RiskLookupDataStore.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAuE;AACvE,6DAA0D;AAC1D,qEAAkE;AAKrD,QAAA,mBAAmB,GAAG,uBAAK,CAAC,KAAK,CAAC;IAC7C,KAAK,EAAE,uBAAK,CAAC,QAAQ,CAAC,uBAAK,CAAC,KAAK,CAAC,iCAAe,CAAC,EAAE,EAAE,CAAC;IACvD,SAAS,EAAE,uBAAK,CAAC,QAAQ,CAAC,uBAAK,CAAC,OAAO,EAAE,KAAK,CAAC;CAChD,CAAC;KACC,OAAO,CAAC,UAAA,IAAI;IAEX,IAAM,aAAa,GAAG,yCAAmB,CAAC,oBAAoB,EAAE,CAAC;IACjE,4BAA4B;IAC5B,IAAM,kBAAkB,GAAG,sBAAI,CAAC;;;;;;oBAE5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;oBACL,qBAAM,aAAa,CAAC,MAAM,EAAE,EAAA;;oBAAvC,QAAQ,GAAG,SAA4B;oBAC7C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC/C,EAAE,CAAC,CAAC,QAAQ,CAAC;wBACX,+BAAa,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;;;;oBAGrC,OAAO,CAAC,GAAG,CAAC,qCAAqC,GAAG,OAAK,CAAC,CAAC;oBAC3D,MAAM,IAAI,KAAK,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC;;oBAG/B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;;;;;KAE1B,CAAC,CAAA;IACF,MAAM,CAAC;QACL,kBAAkB,oBAAA;KACnB,CAAA;AACH,CAAC,CAAC,CAAA","file":"stores/LookupDataStores/RiskLookupDataStore.js","sourcesContent":["import {flow, types, IModelType, applySnapshot} from 'mobx-state-tree';\r\nimport {LookupDataModel} from \"../Common/LookupDataModel\";\r\nimport {DataProviderFactory} from \"../Common/DataProviderFactory\";\r\n\r\n\r\nexport type __IModelType = IModelType<any, any>;\r\n\r\nexport const RiskLookupDataStore = types.model({\r\n  items: types.optional(types.array(LookupDataModel), []),\r\n  isLoading: types.optional(types.boolean, false)\r\n})\r\n  .actions(self => {\r\n\r\n    const _dataProvider = DataProviderFactory.GetRisksDataProvider();\r\n    //loading all business items\r\n    const loadRiskLookupData = flow(function* loadRiskLookupData() {\r\n      try {\r\n        self.isLoading = true;\r\n        const resposne = yield _dataProvider.GetAll();\r\n        console.log(JSON.stringify(resposne, null, 4));\r\n        if (resposne)\r\n          applySnapshot(self.items, resposne)\r\n      }\r\n      catch (error) {\r\n        console.log(\"Error retrieving Risks Lookup Data \" + error);\r\n        throw new Error(error.message);\r\n      }\r\n      finally {\r\n        self.isLoading = false;\r\n      }\r\n    })\r\n    return {\r\n      loadRiskLookupData\r\n    }\r\n  })\r\nexport type RiskLookupDataStore = typeof RiskLookupDataStore.Type\r\n"],"sourceRoot":"..\\..\\..\\src"}