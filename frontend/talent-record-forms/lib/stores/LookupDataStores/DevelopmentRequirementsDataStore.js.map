{"version":3,"sources":["stores/LookupDataStores/DevelopmentRequirementsDataStore.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAuE;AACvE,6DAAiF;AACjF,qEAAkE;AAKrD,QAAA,sCAAsC,GAAG,uBAAK,CAAC,KAAK,CAAC;IAEhE,iHAAiH;IACjH,uBAAuB;IACvB,2FAA2F;IAC3F,KAAK,EAAE,uBAAK,CAAC,QAAQ,CAAC,uBAAK,CAAC,KAAK,CAAC,uCAAqB,CAAC,EAAE,EAAE,CAAC;IAC7D,SAAS,EAAE,uBAAK,CAAC,QAAQ,CAAC,uBAAK,CAAC,OAAO,EAAE,KAAK,CAAC;CAChD,CAAC;KACC,OAAO,CAAC,UAAA,IAAI;IAEX,IAAM,aAAa,GAAG,yCAAmB,CAAC,4CAA4C,EAAE,CAAC;IACzF,4BAA4B;IAC5B,IAAM,2BAA2B,GAAG,sBAAI,CAAC;;;;;;oBAErC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;oBACL,qBAAM,aAAa,CAAC,MAAM,EAAE,EAAA;;oBAAvC,QAAQ,GAAG,SAA4B;oBAC7C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC/C,EAAE,CAAC,CAAC,QAAQ,CAAC;wBACX,+BAAa,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;;;;oBAGrC,OAAO,CAAC,GAAG,CAAC,iCAAiC,GAAG,OAAK,CAAC,CAAC;oBACvD,MAAM,IAAI,KAAK,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC;;oBAG/B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;;;;;KAE1B,CAAC,CAAA;IACF,MAAM,CAAC;QACL,2BAA2B,6BAAA;KAC5B,CAAA;AACH,CAAC,CAAC,CAAA","file":"stores/LookupDataStores/DevelopmentRequirementsDataStore.js","sourcesContent":["import {flow, types, IModelType, applySnapshot} from 'mobx-state-tree';\r\nimport {LookupDataModel, NestedLookupDataModel} from \"../Common/LookupDataModel\";\r\nimport {DataProviderFactory} from \"../Common/DataProviderFactory\";\r\n\r\n\r\nexport type __IModelType = IModelType<any, any>;\r\n\r\nexport const DevelopmentRequirementsLookupDataStore = types.model({\r\n\r\n  //Todo : Fix the following error. We need to find a way to convert ObservableArray to normal Array \"react.js:3528\r\n  // Warning: Failed prop\r\n  // type: Invalid prop `options` of type `object` supplied to `Cascader`, expected `array`.\"\r\n  items: types.optional(types.array(NestedLookupDataModel), []),\r\n  isLoading: types.optional(types.boolean, false)\r\n})\r\n  .actions(self => {\r\n\r\n    const _dataProvider = DataProviderFactory.GetDevelopmentRequirementsLookupDataProvider();\r\n    //loading all business items\r\n    const loadDevelopmentRequirements = flow(function* loadDevelopmentRequirements() {\r\n      try {\r\n        self.isLoading = true;\r\n        const resposne = yield _dataProvider.GetAll();\r\n        console.log(JSON.stringify(resposne, null, 4));\r\n        if (resposne)\r\n          applySnapshot(self.items, resposne)\r\n      }\r\n      catch (error) {\r\n        console.log(\"Error retrieving Business Units\" + error);\r\n        throw new Error(error.message);\r\n      }\r\n      finally {\r\n        self.isLoading = false;\r\n      }\r\n    })\r\n    return {\r\n      loadDevelopmentRequirements\r\n    }\r\n  })\r\n\r\nexport type DevelopmentRequirementsLookupDataStore = typeof DevelopmentRequirementsLookupDataStore.Type\r\n"],"sourceRoot":"..\\..\\..\\src"}